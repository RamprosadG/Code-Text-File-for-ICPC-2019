 Data Structure, Algorithm & Graph Theory For ICPC 2019
  Author: Ramprosad Gharami
  Department of CSE
  BSMRSTU

**************************************************************

// C++ Template

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll                 long long
#define LL                 long long
#define pii                pair<int, int>
#define pll                pair<ll, ll>
#define pil                pair<int, ll>
#define pli                pair<ll, int>
#define vi                 vector<int>
#define vl                 vector<ll>
#define vii                vector<pii>
#define vll                vector<pll>
#define vil                vector<pil>
#define vli                vector<pli>
#define pb                 push_back
#define mp                 make_pair
#define ff                 first
#define ss                 second
#define sz(x)              (int)x.size()
#define TN                 typename
#define all(v)             v.begin(), v.end()
#define fill(a, b)         memset(a, b, sizeof(a))
#define endl               '\n'
#define Int                in()
#define Long               Lin()
#define policy_set         tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define policy_multiset    tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> T lcm(T a, T b) {return a * (b / gcd(a, b));}
template <TN T> inline void smin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void smax(T &a, T b) {a = a > b ? a : b;}

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {cout << endl ;}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << ", " ;
    err(++it, args...);
}

inline int in() {int n; scanf("%d", &n); return n;}
inline ll Lin() {ll n; scanf("%lld", &n); return n;}
inline double Din() {double n; scanf("%lf", &n); return n;}

const int mod        = (int)1e9 + 7;
const ll  Mod        = (ll)1e9 + 7;

inline int add(int a, int b) {a += b; return a >= mod ? a - mod : a;}
inline int sub(int a, int b) {a -= b; return a < 0 ? a + mod : a;}
inline int mul(int a, int b) {return (ll)a * b % mod;}

const int inf        = (int)2e9 + 5;
const ll  Inf        = (ll)1e18 + 5;
const int N          = 2e5 + 5;



int solve() {
    
    return 0;
}

int main() {
    //ios_base::sync_with_stdio(false); cin.tie(NULL);
    int test = 1, tc = 0;
    //scanf("%d", &test);
    //cin >> test;
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
    return 0;
}

***************************************************************

// Mathematics, Number Theory & Combinatorics

// Segmented Sieve(Prime)

struct Segmented_Sieve {

	vi sieve(int n) {
		std::vector<int> prime;
		std::vector<bool> vis(n + 1, false);
		vis[2] = true;
		for (int i = 3; i <= n; i += 2) {
			vis[i] = true;
		}
		for (int i = 3; i * i <= n; i += 2) {
			if (vis[i]) {
				for (int j = i * i; j <= n; j += i + i) {
					vis[j] = false;
				}
			}
		}
		prime.push_back(2);
		for (int i = 3; i <= n; i += 2) {
			if (vis[i]) prime.push_back(i);
		}
		return prime;
	}

	vl seg_sieve(ll l, ll r) {
		std::vector<ll> prime;
		std::vector<bool> vis(r - l + 1, true);
		int n = (int)sqrt(0.5 + r);
		vi p = sieve(n);
		for (int i = 0; i < sz(p) && 1LL * p[i] * p[i] <= r; i++) {
			for (ll x = ((l - 1) / p[i] + 1) * p[i]; x <= r; x += p[i]) {
				if(x == p[i]) continue;
				vis[x - l] = false;
			}
		}
		for (ll i = l; i <= r; i++) {
			if (i > 1 && vis[i - l]) prime.push_back(i);
		}
		return prime;
	}
};

// Euler Totient Fumction(Segmented Sieve)

struct Segmented_Sieve_Totient {

	vi sieve(int n) {
		std::vector<int> prime;
		std::vector<bool> vis(n + 1, false);
		vis[2] = true;
		for (int i = 3; i <= n; i += 2) {
			vis[i] = true;
		}
		for (int i = 3; i * i <= n; i += 2) {
			if (vis[i]) {
				for (int j = i * i; j <= n; j += i + i) {
					vis[j] = false;
				}
			}
		}
		prime.push_back(2);
		for (int i = 3; i <= n; i += 2) {
			if (vis[i]) prime.push_back(i);
		}
		return prime;
	}

	vl seg_sieve_totient(ll l, ll r) {
		std::vector<ll> phi(r - l + 1);
		std::vector<ll> num(r - l + 1);
		int n = (int)sqrt(0.5 + r);
		vi p = sieve(n);
		for (ll i = l; i <= r; i++) {
			phi[i - l] = i;
			num[i - l] = i;
		}
		for (int i = 0; i < sz(p) && 1LL * p[i] * p[i] <= r; i++) {
			for (ll x = ((l - 1) / p[i] + 1) * p[i]; x <= r; x += p[i]) {
				ll& cur = num[x - l];
				while (cur % p[i] == 0) {
					cur /= p[i];
				}
				phi[x - l] = phi[x - l] / p[i] * (p[i] - 1);
			}
		}
		for (ll x = l; x <= r; x++) {
			ll& cur = num[x - l];
			if (cur != 1) phi[x - l] = phi[x - l] / cur * (cur - 1);
		}
		return phi;
	}
};

// Matrix Exponentiation (Finding Nth Fibonacci number)

struct Matrix_Exponentiation {
    
    int m;

    Matrix_Exponentiation() {
    	m = 2;
    }

	matrix multiply(matrix A, matrix B) {
		matrix C(m + 1, vi(m + 1, 0));
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= m; j++) {
				for (int k = 1; k <= m; k++) {
					C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));
				}
			}
		}
		return C;
	}

	matrix pow(matrix A, ll p) {
		if (p == 1) return A;
		matrix X = pow(A, p / 2);
		X = multiply(X, X);
		if (p & 1) X = multiply(X, A);
		return X;
	}

	int get_ans(ll n) {
		if (n < 2) return n;
		vi F1(m + 1);
		F1[1] = 1;
		F1[2] = 1;
		matrix T(m + 1, vi(m + 1));
		T[1][1] = 1, T[1][2] = 1;
		T[2][1] = 1, T[2][2] = 0;
		T = pow(T, n - 1);
		return T[1][1];
	}
};

// Josephus Problem

struct Josephus_Problem {

	int joseph_one(int n, int k) {   // 1 indexed, O(n) complexity
		int res = 0;
		for (int i = 1; i <= n; ++i) {
			res = (res + k) % i;
		}
		return res + 1;
	}

	int joseph_two(int n, int k) {    // 0 indexed, O(klogn) complexity
		if (n == 1) return 0;
		if (k == 1) return n - 1;
		if (k > n) return (joseph_two(n - 1, k) + k) % n;
		int cnt = n / k;
		int res = joseph_two(n - cnt, k);
		res -= n % k;
		if (res < 0) res += n;
		else res += res / (k - 1);
		return res;
	}
};

// Linear Diophantine Equation

struct Linear_Diophantine_Equation {

	int egcd(int a, int b, int &x, int &y) {
		if (b == 0) {
			x = 1, y = 0;
			return a;
		}
		int x1, y1;
		int d = egcd (b, a % b, x1, y1);
		y = x1 - (a / b) * y1;
		x = y1;
		return d;
	}

	bool diophantine(int A, int B, int C, int &x, int &y) {
		int g = gcd(A, B);
		if (C % g != 0) return false;
		int a = A / g, b = B / g, c = C / g;
		egcd(a, b, x, y);
		if (g < 0) a *= -1; b *= -1; c *= -1;
		x *= c; y *= c;
		return true;
	}
};

// Trailing Zero & Number of Digits

struct Trailing_Zero_Number_of_Digit {

	ll calc(ll n, int base, int p) {
		int cnt = 0;
		while (base % p == 0) cnt++, base /= p;
		ll cur = 0;
		while (n) {
			n /= p;
			cur += n;
		}
		cur /= cnt;
		return cur;
	}

	ll trailing_zero(ll n, int base) {
		int tem = base;
		ll ans = Inf;
		for (int i = 2; i * i <= base; i++) {
			if (tem % i == 0) {
				while (tem % i == 0) tem /= i;
				smin(ans, calc(n, base, i));
			}
		}
		if (tem > 1) smin(ans, calc(n, tem, tem));
		return ans;
	}

	int Number_of_Digit(int n, int base) {
		double ans = 1.0;
		for (int i = 1; i <= n; i++) {
			ans += log10(1.0 * n) / log10(1.0 * base);
		}
		return ans;
	}
};

**************************************************************************

// String Algorithm

// Trie Data Structure(XOR)

void Add(int root, int num) {
	for (int i = 30; i >= 0; i--) {
		int to = (num & (1 << i)) ? 1 : 0;
		if (node[root][to] == -1) node[root][to] = ++state;
		root = node[root][to];
		cnt[root]++;
	}
}
 
void Remove(int root, int num, int idx) {
	int to = (num & (1 << idx)) ? 1 : 0;
	cnt[node[root][to]]--;
	if(idx > 0) Remove(node[root][to], num, idx - 1);
    if(cnt[node[root][to]] == 0) {
    	node[root][to] = -1;
    }
}
 
void Query(int root, int num) {
	for (int i = 30; i >= 0; i--) {
		int need = (k & (1 << i)) ? 1 : 0;
		int has = (num & (1 << i)) ? 1 : 0;
		if (need == 1) {
			if (has == 0) {
				if (node[root][0] != -1) ans += cnt[node[root][0]];
				if (node[root][1] != -1) root = node[root][1];
				else return;
			}
			else {
				if (node[root][1] != -1) ans += cnt[node[root][1]];
				if (node[root][0] != -1) root = node[root][0];
				else return;
			}
		}
		else {
			if (has == 0) {
				if (node[root][0] != -1) root = node[root][0];
				else return;
			}
			else {
				if (node[root][1] != -1) root = node[root][1];
				else return;
			}
		}
	}
}

*****************************************************************************

// Dynamic Programming(DP)

// Dynamic CHT

bool tp ;

struct Line{
	mutable ll m, c, p ;
	bool operator<(const Line& u)const{return tp ? p < u.p : m < u.m ;}
	bool operator<(ll u){return p < u ;}
} ;

struct DynamicCHT : multiset< Line > {
	
	ll div(ll a, ll b){
		return a / b - ((a ^ b) < 0 and (a % b)) ;
	}
	bool intersect(iterator x, iterator y){
		if(y == end()){ x -> p = Inf ; return false ;}
		if(x -> m == y -> m)x -> p = x -> m >= y -> m ? Inf : -Inf ;
		else x -> p = div(x -> c - y -> c, y -> m - x -> m) ;
		return x -> p >= y -> p ;
	}
	void add(ll x, ll y){
		auto c = insert({x, y, 0}), b = c++, a = b ;
		while(intersect(b, c))c = erase(c) ;
		if(a != begin() and intersect(--a, b))intersect(a, b = erase(b)) ;
		while((b = a) != begin() and (--a) -> p >= b -> p)
			intersect(a, erase(b)) ;
	}
	ll query(ll x){
		assert(!empty()) ;
		tp = 1 ;
		auto u = *lower_bound({0, 0, x}) ;
		tp = 0 ;
		return u.m * x + u.c ;
	}
} ;

// Travelling Salesman Problem(Bitmask)

ll tsp(int mask, int at) {
    if (mask == (1 << n) - 1) return (ll)dis[at][0];
    if (dp[mask][at] != -1) return dp[mask][at];
    ll res = inf;
    for (int i = 0; i < n; i++) {
        if (Check(mask, i) == 0) {
            res = min(res, tsp(Set(mask, i), i) + dis[at][i]);
        }
    }
    return dp[mask][at] = res;
}

// Bitmask DP(Reverse)

int bitmask(int mask) {
	if (mask == 0) return 0;
	int& ans = dp[mask];
	if (ans != -1) return ans;
	ans = 0;
	for (int i = mask; i > 0; i = ((i - 1) & mask)) {
		if (pre[i] > 0) continue;
		smin(ans, bitmask(mask ^ i) + pre[i]);
	}
	return ans;
}

*******************************************************************

// Data Structure

// Binary Indexed Tree(Range Update)

struct BIT_RANGE {

    std::vector<ll> pre, sum;
    int n;

    BIT_RANGE() {
        n = N;
        pre.resize(n + 1, 0);
        sum.resize(n + 1, 0);
    }

    void update(vector<ll>& bit, int x, ll val) {
        while (x <= n) {
            bit[x] += val;
            x += (x & -x);
        }
    }

    void update(int l, int r, ll val) {
        update(sum, l, val);
        update(sum, r + 1, -val);
        update(pre, l, val * (l - 1));
        update(pre, r + 1, -val * r);
    }

    ll query(std::vector<ll>& bit, int x) {
        ll ans = 0;
        while (x > 0) {
            ans += bit[x];
            x -= (x & -x);
        }
        return ans;
    }

    ll query(int l, int r) {
        ll ans = 0;
        ans += query(sum, r) * r - query(pre, r);
        ans -= query(sum, l - 1) * (l - 1) - query(pre, l - 1);
        return ans;
    }
};

// Dynamic Segment Tree

struct Dynamic_Seg_tree_sum {

	std::vector<ll> node;
	std::vector<int> l, r;

	Dynamic_Seg_tree_sum() {
		node.push_back(0);
		l.push_back(-1);
		r.push_back(-1);
	}

	void get_id(int& x) {
		x = sz(node);
		node.push_back(0);
		l.push_back(-1);
		r.push_back(-1);
	}

	void update(int pos, int left, int right, int x, ll val) {
		if (left == right) {
			node[pos] += val;
			return;
		}
		node[pos] += val;
		int mid = (left + right) >> 1;
		if (x <= mid) {
			if (l[pos] == -1) get_id(l[pos]);
			update(l[pos], left, mid, x, val);
		}
		else {
			if (r[pos] == -1) get_id(r[pos]);
			update(r[pos], mid + 1, right, x, val);
		}
	}

	ll query(int pos, int left, int right, int x, int y) {
		if (left > y || right < x) return 0;
		if (left >= x && right <= y)  return node[pos];
		int mid = (left + right) >> 1;
		ll ans = 0;
		if (l[pos] != -1) ans += query(l[pos], left, mid, x, y);
		if (r[pos] != -1) ans += query(r[pos], mid + 1, right, x, y);
		return ans;
	}
};

// Dynamic Segment Tree Lazy Propagate

struct Dynamic_seg_tree_lazy_sum {
	std::vector<ll> node, prop;
	std::vector<int> l, r;

	Dynamic_seg_tree_lazy_sum() {
		node.push_back(0);
		prop.push_back(0);
		l.push_back(-1);
		r.push_back(-1);
	}

	void get_id(int& x) {
		x = sz(node);
		node.push_back(0);
		prop.push_back(0);
		l.push_back(-1);
		r.push_back(-1);
	}

	void propagate(int pos, int left, int right) {
		ll val = prop[pos];
		prop[pos] = 0;
		if (l[pos] == -1) get_id(l[pos]);
		if (r[pos] == -1) get_id(r[pos]);
		int mid = (left + right) >> 1;
		node[l[pos]] += val * (mid - left + 1);
		node[r[pos]] += val * (right - mid);
		prop[l[pos]] += val;
		prop[r[pos]] += val;
	}

	void update(int pos, int left, int right, int x, int y, ll val) {
		if(left > y || right < x) return;
		if (left >= x && right <= y) {
			node[pos] += val * (right - left + 1);
			prop[pos] += val;
			return;
		}
		if (prop[pos]) propagate(pos, left, right);
		int mid = (left + right) >> 1;
		if (x <= mid) {
			if (l[pos] == -1) get_id(l[pos]);
			update(l[pos], left, mid, x, y, val);
		}
		if (y > mid) {
			if (r[pos] == -1) get_id(r[pos]);
			update(r[pos], mid + 1, right, x, y, val);
		}
		node[pos] = 0;
		if (l[pos] != -1) node[pos] += node[l[pos]];
		if (r[pos] != -1) node[pos] += node[r[pos]];
	}

	ll query(int pos, int left, int right, int x, int y) {
		if (left > y || right < x) return 0;
		if (left >= x && right <= y) return node[pos];
		if (prop[pos]) propagate(pos, left, right);
		int mid = (left + right) >> 1;
		ll ans = 0;
		if (l[pos] != -1) ans += query(l[pos], left, mid, x, y);
		if (r[pos] != -1) ans += query(r[pos], mid + 1, right, x, y);
		return ans;
	}
};

// Segment Tree Lazy Propagate 2D

struct Seg_tree_lazy_sum_two {

	std::vector<vl> node, prop;

	Seg_tree_lazy_sum_two() {
		node.resize(4 * N, vl(4 * N, 0));
		prop.resize(4 * N, vl(4 * N, 0));
	}

	void propagate(int pos, int left, int right, int p) {
		int mid = (left + right) >> 1;
		ll val = prop[p][pos];
		prop[p][pos] = 0;
		node[p][pos * 2] += val * (mid - left + 1);
		node[p][pos * 2 + 1] += val * (right - mid);
		prop[p][pos * 2] += val;
		prop[p][pos * 2 + 1] += val;
	}

	void update_init(int pos, int left, int right, int y1, int y2, ll val, int p) {
		if (left > y2 || right < y1) return;
		if (left >= y1 && right <= y2) {
			node[p][pos] += val * (right - left + 1);
			prop[p][pos] += val;
			return;
		}
		if (prop[p][pos]) propagate(pos, left, right, p);
		int mid = (left + right) >> 1;
		update_init(pos * 2, left, mid, y1, y2, val, p);
		update_init(pos * 2 + 1, mid + 1, right, y1, y2, val, p);
		node[p][pos] = node[p][pos * 2] + node[p][pos * 2 + 1];
	}

	void update_merge(int pos, int left, int right, int y1, int y2, int p) {
		if (left > y2 || right < y1) return;
		if (left >= y1 && right <= y2) {
			node[p][pos] = node[p * 2][pos] + node[p * 2 + 1][pos];
			return;
		}
		if (prop[p][pos]) propagate(pos, left, right, p);
		int mid = (left + right) >> 1;
		update_merge(pos * 2, left, mid, y1, y2, p);
		update_merge(pos * 2 + 1, mid + 1, right, y1, y2, p);
		node[p][pos] = node[p * 2][pos] + node[p * 2 + 1][pos];
	}

	void update(int pos, int left, int right, int x1, int y1, int x2, int y2, ll val) {
		if (left > x2 || right < x1) return;
		if (left >= x1 && right <= x2) {
			update_init(1, 1, n, y1, y2, val * (right - left + 1), pos);
			return;
		}
		int mid = (left + right) >> 1;
		update(pos * 2, left, mid, x1, y1, x2, y2, val);
		update(pos * 2 + 1, mid + 1, right, x1, y1, x2, y2, val);
		update_merge(1, 1, n, y1, y2, pos);
	}

	ll query_merge(int pos, int left, int right, int y1, int y2, int p) {
		if (left > y2 || right < y1) return 0LL;
		if (left >= y1 && right <= y2) return node[p][pos];
		if (prop[p][pos]) propagate(pos, left, right, p);
		int mid = (left + right) >> 1;
		ll m = query_merge(pos * 2, left, mid, y1, y2, p);
		ll n = query_merge(pos * 2 + 1, mid + 1, right, y1, y2, p);
		return m + n;
	}

	ll query(int pos, int left, int right, int x1, int y1, int x2, int y2) {
		if (left > x2 || right < x1) return 0LL;
		if (left >= x1 && right <= x2) return query_merge(1, 1, n, y1, y2, pos);
		int mid = (left + right) >> 1;
		ll m = query(pos * 2, left, mid, x1, y1, x2, y2);
		ll n = query(pos * 2 + 1, mid + 1, right, x1, y1, x2, y2);
		return m + n;
	}
};

// Kth Number in a Range(persistent Segment Tree)

struct kth_min_range {

    int idx;
    std::vector<int> a, b, c;
    std::vector<int> node, l, r, root;

    kth_min_range() {
        idx = 1;

        a.resize(N);
        b.resize(N);
        c.resize(N);

        node.resize(N * 50);
        l.resize(N * 50);
        r.resize(N * 50);
        root.resize(N * 50);
    }

    void compress(int n) {
        vii tem;
        for (int i = 1; i <= n; i++) {
            tem.pb({a[i], i});
        }
        sort(all(tem));
        int cur = 1;
        for (int i = 0; i < n; i++) {
            if (i > 0 && tem[i].ff != tem[i - 1].ff) cur++;
            b[tem[i].ss] = cur;
        }
        for (int i = 1; i <= n; i++) {
            c[b[i]] = a[i];
        }
    }

    void build(int pos, int left, int right) {
        if (left == right) return;
        int mid = (left + right) >> 1;
        l[pos] = ++idx;
        r[pos] = ++idx;
        build(l[pos], left, mid);
        build(r[pos], mid + 1, right);
    }

    int update(int pos, int left, int right, int x) {
        if (left > x || right < x) return pos;
        int id = ++idx;
        if (left == right) {
            node[id] = node[pos] + 1;
            return id;
        }
        int mid = (left + right) >> 1;
        l[id] = update(l[pos], left, mid, x);
        r[id] = update(r[pos], mid + 1, right, x);
        node[id] = node[l[id]] + node[r[id]];
        return id;
    }

    int query(int pos1, int pos2, int left, int right, int k) {
        if (left == right) return c[left];
        int mid = (left + right) >> 1;
        int cnt = node[l[pos2]] - node[l[pos1]];
        if (cnt >= k) return query(l[pos1], l[pos2], left, mid, k);
        else return query(r[pos1], r[pos2], mid + 1, right, k - cnt);
    }
};

// Kth number In Tree

struct kth_min_tree {

    int idx;
    std::vector<int> a, b, c;
    std::vector<int> node, l, r, root;

    std::vector<int> dep;
    std::vector<bool> vis;
    std::vector<vi> g, par;

    kth_min_tree() {
        idx = 2;
        a.resize(N);
        b.resize(N);
        c.resize(N);

        node.resize(N * 50);
        l.resize(N * 50);
        r.resize(N * 50);
        root.resize(N * 50);

        g.resize(N);
        par.resize(17, vi(N, 1));
        vis.resize(N, false);
        dep.resize(N, 0);
    }

    int compress(int n) {
        vii tem;
        for (int i = 1; i <= n ; i++) {
            tem.pb({a[i], i});
        }
        sort(all(tem));
        int cur = 1;
        for (int i = 0; i < n; i++) {
            if (i > 0 && tem[i].ff != tem[i - 1].ff) cur++;
            b[tem[i].ss] = cur;
            c[b[tem[i].ss]] = a[tem[i].ss];
        }
        return cur;
    }

    void build(int pos, int left, int right) {
        if (left == right) return;
        int mid = (left + right) >> 1;
        l[pos] = idx++;
        r[pos] = idx++;
        build(l[pos], left, mid);
        build(r[pos], mid + 1, right);
    }

    int update(int pos, int left, int right, int x) {
        if (left > x || right < x) return pos;
        int id = idx++;
        if (left == right) {
            node[id] = node[pos] + 1;
            return id;
        }
        int mid = (left + right) >> 1;
        l[id] = update(l[pos], left, mid, x);
        r[id] = update(r[pos], mid + 1, right, x);
        node[id] = node[l[id]] + node[r[id]];
        return id;
    }

    int query(int pos1, int pos2, int pos3, int pos4, int left, int right, int k) {
        if (left == right) return c[left];
        int mid = (left + right) >> 1;
        int cnt = node[l[pos1]] + node[l[pos2]] - node[l[pos3]] - node[l[pos4]];
        if (cnt >= k) return query(l[pos1], l[pos2], l[pos3], l[pos4], left, mid, k);
        else return query(r[pos1], r[pos2], r[pos3], r[pos4], mid + 1, right, k - cnt);
    }

    void add_edge(int u, int v) {
        g[u].push_back(v);
        g[v].push_back(u);
    }

    void dfs(int n, int u, int p, int d = 1) {
        vis[u] = true, dep[u] = d;
        root[u] = update(root[p], 1, n, b[u]);
        for (int i = 1; i <= 16; i++) {
            par[i][u] = par[i - 1][par[i - 1][u]];
        }
        for (auto v : g[u]) {
            if (vis[v]) continue;
            par[0][v] = u;
            dfs(n, v, u, d + 1);
        }
    }

    int lca(int u, int v) {
        if (dep[u] < dep[v]) swap(u, v);
        for (int i = 16; i >= 0 && u != v; i--) {
            if (dep[par[i][u]] >= dep[v]) u = par[i][u];
        }
        if (u == v) return u;
        for (int i = 16; i >= 0; i--) {
            if (par[i][u] != par[i][v]) u = par[i][u], v = par[i][v];
        }
        return par[0][u];
    }
};

// Merge Sort Tree

struct Merge_sort_tree {

	std::vector<vi> node;

	Merge_sort_tree() {
		node.resize(4 * N);
	}

	void build(int pos, int left, int right) {
		if (left == right) {
			node[pos].push_back(a[left]);
			return;
		}
		int mid = (left + right) >> 1;
		build(pos * 2, left, mid);
		build(pos * 2 + 1, mid + 1, right);
		merge(all(node[pos * 2]), all(node[pos * 2 + 1]), back_inserter(node[pos]));
	}

	int query(int pos, int left, int right, int x, int y, int p, int q) {
		if (left > y || right < x) return 0;
		if (left >= x && right <= y) return upper_bound(all(node[pos]), q) - lower_bound(all(node[pos]), p);
		int mid = (left + right) >> 1;
		int m = query(pos * 2, left, mid, x, y, p, q);
		int n = query(pos * 2 + 1, mid + 1, right, x, y, p, q);
		return m + n;
	}

	int query_mn(int pos, int left, int right, int x, int y, int p, int q) {
		if (left > y || right < x) return inf;
		if (left >= x && right <= y) {
			int cnt = upper_bound(all(node[pos]), q) - lower_bound(all(node[pos]), p);
			if (!cnt) return inf;
			return *lower_bound(all(node[pos]), p);
		}
		int mid = (left + right) >> 1;
		int m = query_mn(pos * 2, left, mid, x, y, p, q);
		int n = query_mn(pos * 2 + 1, mid + 1, right, x, y, p, q);
		return min(m, n);
	}

	int query_mx(int pos, int left, int right, int x, int y, int p, int q) {
		if (left > y || right < x) return -inf;
		if (left >= x && right <= y) {
			int cnt = upper_bound(all(node[pos]), q) - lower_bound(all(node[pos]), p);
			if (!cnt) return -inf;
			auto it = upper_bound(all(node[pos]), q);
			--it;
			return *it;
		}
		int mid = (left + right) >> 1;
		int m = query_mx(pos * 2, left, mid, x, y, p, q);
		int n = query_mx(pos * 2 + 1, mid + 1, right, x, y, p, q);
		return max(m, n);
	}
};

// MO Algo

int a[N], k;

bool cmp(const pair<pii, int> x, const pair<pii, int> y) {
	if (x.ff.ff / k != y.ff.ss / k) return (x < y);
	return ((x.ff.ff / k) & 1) ? (x.ff.ss < y.ff.ss) : (x.ff.ss > y.ff.ss);
}

struct MO_Algo {

	vector<pair<pii, int> > qry;
	int cur_res;
	std::vector<int> cnt, ans;

	MO_Algo() {
		cur_res = 0;
		cnt.resize(N, 0);
		ans.resize(N, 0);
	}

	void add(int x) {
		cnt[a[x]]++;
		if (cnt[a[x]] == 1) cur_res++;
	}

	void remove(int x) {
		cnt[a[x]]--;
		if (cnt[a[x]] == 0) cur_res--;
	}

	void add(int i, int l, int r) {
		qry.push_back(mp(mp(l, r), i));
	}

	void process(int n, int q) {
		k = sqrt(n);
		sort(all(qry), cmp);
		int cur_l = 1, cur_r = 0;
		for (int i = 0; i < q; i++) {
			int l = qry[i].ff.ff, r = qry[i].ff.ss, id = qry[i].ss;
			while (cur_l > l) add(--cur_l);
			while (cur_r < r) add(++cur_r);
			while (cur_l < l) remove(cur_l++);
			while (cur_r > r) remove(cur_r--);
			ans[id] = cur_res;
		}
	}
};

// MO Algo With Update

int a[N], last[N], k;

struct query {
	int l, r, t, id;
	query() {}
	query(int _l, int _r, int _t, int _id) : l(_l), r(_r), t(_t), id(_id) {}
};

bool cmp(const query a, const query b) {
	int l1 = a.l / k, l2 = b.l / k;
	int r1 = a.r / k, r2 = b.r / k;
	if (l1 != l2) return l1 < l2;
	if (r1 != r2) return r1 < r2;
	return a.t < b.t;
}

struct update {
	int x, pre, now;
	update() {}
	update(int _x, int _pre, int _now) : x(_x), pre(_pre), now(_now) {}
};

struct Mo_with_update {

	std::vector<query> qry;
	std::vector<update> upd;
	int cur_res;
	std::vector<int> cnt;
	std::vector<int> ans;

	Mo_with_update() {
		cur_res = 0;
		cnt.resize(N, 0);
		ans.resize(N, 0);
	}

	void add_query(int l, int r, int id) {
		qry.push_back(query(l, r, sz(upd), id));
	}

	void add_update(int x, int y) {
		upd.push_back(update(x, last[x], y));
		last[x] = y;
	}

	void add(int x) {
		x = a[x];
		cnt[x]++;
		if (cnt[x] == 1) cur_res++;
	}

	void remove(int x) {
		x = a[x];
		cnt[x]--;
		if (cnt[x] == 0) cur_res--;
	}

	void apply(int x, int y, int l, int r) {
		if (l <= x && x <= r) {
			remove(x);
			a[x] = y;
			add(x);
		} else {
			a[x] = y;
		}
	}

	void process(int n) {
		k = pow(n, 2.0 / 3);
		int q = sz(qry);
		sort(all(qry), cmp);
		int l = 1, r = 0, t = 0;
		for (int i = 0; i < q; i++) {
			while (t < qry[i].t) t++, apply(upd[t - 1].x, upd[t - 1].now, l, r);
			while (t > qry[i].t) apply(upd[t - 1].x, upd[t - 1].pre, l, r), t--;

			while (l > qry[i].l) add(--l);
			while (r < qry[i].r) add(++r);
			while (l < qry[i].l) remove(l++);
			while (r > qry[i].r) remove(r--);

			ans[qry[i].id] = cur_res;
		}
	}
};

// Minimum Element in queue

struct minimum_queue {

	deque<pair<int, int>> q;
	int cnt_added;
	int cnt_removed;

	minimum_queue() {
		q.clear();
		cnt_added = 0;
		cnt_removed = 0;
	}

	void add(int new_element) {
		while (!q.empty() && q.back().first > new_element) {
			q.pop_back();
		}
		q.push_back({new_element, cnt_added});
		cnt_added++;
	}

	void remove() {
		if (!q.empty() && q.front().second == cnt_removed) {
			q.pop_front();
		}
		cnt_removed++;
	}

	int get_ans() {
		return q.front().ff;
	}
};

******************************************************************

// Graph Theory

// Dynamic Diameter of tree

struct Node {
    ll d, a, b, c, ab, bc, abc;
    Node(ll d = 0, ll a = 0, ll b = 0, ll c = 0, ll ab = 0, ll bc = 0, ll abc = 0) :
        d(d), a(a), b(b), c(c), ab(ab), bc(bc), abc(abc) {}
    Node shift(ll del) {
        return Node(d + del, a + del, b - 2 * del, c + del, ab - del, bc - del, abc);
    }
} t[N << 3];

int n, m, q, in[N], out[N], l[N], r[N], idx;
vector<int> adj[N];
ll w[N], W;

Node merge(Node L, Node R) {
    R = R.shift(L.d);

    Node ret;
    ret.d = R.d;
    ret.a = max(L.a, R.a);
    ret.b = max(L.b, R.b);
    ret.c = max(L.c, R.c);
    ret.ab = max({L.ab, R.ab, L.a + R.b});
    ret.bc = max({L.bc, R.bc, L.b + R.c});
    ret.abc = max({L.abc, R.abc, L.ab + R.c, L.a + R.bc});

    return ret;
}

void update(int node, int l, int r, int i, ll x) {
    if (l == r) {
        t[node] = Node(x, x, -2 * x, x, -x, -x, 0);
    } else {
        int m = l + r >> 1;
        if (i <= m) update(node << 1, l, m, i, x);
        else update(node << 1 | 1, m + 1, r, i, x);
        t[node] = merge(t[node << 1], t[node << 1 | 1]);
    }
}

void dfs(int u, int p) {
    for (int i : adj[u]) {
        int v = l[i] ^ r[i] ^ u;
        if (v == p) continue;
        update(1, 1, m, ++idx, w[i]);
        in[i] = idx;
        dfs(v, u);
        update(1, 1, m, ++idx, -w[i]);
        out[i] = idx;
    }
}

int solve() {
    scanf("%d %d %lld", &n, &q, &W);
    for (int i = 0; i < n - 1; ++i) {
        scanf("%d %d %lld", &l[i], &r[i], &w[i]);
        adj[l[i]].push_back(i);
        adj[r[i]].push_back(i);
    }

    m = 2 * (n - 1);
    dfs(1, 0);

    ll last = 0;

    while (q--) {
        int i; ll e;
        scanf("%d %lld", &i, &e);
        i = (i + last) % (n - 1);
        e = (e + last) % W;

        update(1, 1, m, in[i], e);
        update(1, 1, m, out[i], -e);

        printf("%lld\n", last = t[1].abc);
    }
    return 0;
}

// Euler Tour

struct Euler_tour {

	int t;
	std::vector<vi> g, par;
	std::vector<int> st, et, dep;
	std::vector<ll> node;

	Euler_tour() {
		t = 0;
		g.resize(N);
		par.resize(18, vi(N, 1));
		st.resize(N, 0);
		et.resize(N, 0);
		dep.resize(N, 0);
		node.resize(4 * N, 0);
	}

	void add_edge(int u, int v) {
		g[u].push_back(v);
		g[v].push_back(u);
	}

	void propagate(int pos) {
		node[pos * 2] += node[pos];
		node[pos * 2 + 1] += node[pos];
		node[pos] = 0;
	}

	void update(int pos, int left, int right, int x, int y, int val) {
		if (left > y || right < x) return;
		if (left >= x && right <= y) {
			node[pos] += val;
			return;
		}
		if (node[pos]) propagate(pos);
		int mid = (left + right) >> 1;
		update(pos * 2, left, mid, x, y, val);
		update(pos * 2 + 1, mid + 1, right, x, y, val);
	}

	int query(int pos, int left, int right, int x) {
		if (left > x || right < x) return 0;
		if (left == right) return node[pos];
		if (node[pos]) propagate(pos);
		int mid = (left + right) >> 1;
		int m = query(pos * 2, left, mid, x);
		int n = query(pos * 2 + 1, mid + 1, right, x);
		return m + n;
	}

	void dfs(int u, int p = -1, int d = 0) {
		st[u] = ++t;
		dep[u] = d;
		for (int i = 1; i <= 17; i++) {
			par[i][u] = par[i - 1][par[i - 1][u]];
		}
		for (int v : g[u]) {
			if (p == v) continue;
			par[0][v] = u;
			dfs(v, u, d + 1);
		}
		et[u] = t;
	}

	int lca(int u, int v) {
		if (dep[u] < dep[v]) swap(u, v);
		for (int i = 17; i >= 0 && u != v; i--) {
			if (dep[par[i][u]] >= dep[v]) u = par[i][u];
		}
		if (u == v) return u;
		for (int i = 17; i >= 0; i--) {
			if (par[i][u] != par[i][v]) u = par[i][u], v = par[i][v];
		}
		return par[0][u];
	}

	ll get_result(int u, int v, int n) {
		int l = lca(u, v);
		ll ans = 0;
		ans += query(1, 1, n, st[u]);
		ans += query(1, 1, n, st[v]);
		ans -= 2 * query(1, 1, n, st[l]);
		return ans + a[l];
	}
};

// Kuhn Algo(maximum bipartite matching)

struct Kuhn_Algo {

	int t;
	std::vector<vi> g;
	std::vector<int> num, p, vis;

	Kuhn_Algo() {
		t = 1;
		g.resize(N);
		num.resize(N, 0);
		p.resize(N, 0);
		vis.resize(N, 0);
	}

	void add_edge(int u, int v) {
		g[u].push_back(v);
		g[v].push_back(u);
	}

	bool kuhn(int u) {
		if (vis[u] == t) return false;
		vis[u] = t;
		for (auto v : g[u]) {
			if (p[v] == 0 || kuhn(p[v])) {
				p[v] = u;
				return true;
			}
		}
		return false;
	}

	int get_result(int n) {
		int ans = 0;
		for (int i = 1; i <= n; i++) {
			if (kuhn(i)) ans++, t++;
		}
		return ans;
	}
};

// Bottom Up and Top Down Approach in Tree(DP)

vi g[N];
int a[N];
ll res, ans;
ll sum[N];
 
void dfs(int u, int p = -1, int h = 0) {
	res += 1LL * a[u] * h;
	sum[u] = a[u];
	for (int v : g[u]) {
		if (v == p) continue;
		dfs(v, u, h + 1);
		sum[u] += sum[v];
	}
}
 
void dfs2(int u, int p = -1) {
	smax(ans, res);
	for (int v : g[u]) {
		if (v == p) continue;
		res -= sum[v];
		sum[u] -= sum[v];
		res += sum[u];
		sum[v] += sum[u];
 
		dfs2(v, u);
 
		sum[v] -= sum[u];
		res -= sum[u];
		sum[u] += sum[v];
		res += sum[v];
	}
}

// Disjoint Set Union (Color in a range with color c) 

std::vector<pair<pii, int>> qry;
int color[N];

struct Disjoint_Set_Union {

	std::vector<int> par, Rank;

	Disjoint_Set_Union() {
		Rank.resize(N, 1);
		par.resize(N);
		for (int i = 1; i < N; i++) {
			par[i] = i;
		}
	}

	int Find(int u) {
		return par[u] == u ? u : par[u] = Find(par[u]);
	}

	void process_query(int l, int r, int c) {
		for (int u = l; ; ) {
			u = Find(u);
			if (u > r) break;
			color[u] = c;
			par[u] = u + 1;
		}
	}

	void process(int q) {
		for (int i = q - 1; i >= 0; i--) {
			process_query(qry[i].ff.ff, qry[i].ff.ss, qry[i].ss);
		}
	}
};

// Disjoint Set Union(Distance from Root)

struct Disjoint_Set_Union {

	std::vector<pii> par;
	std::vector<int> Rank;

	Disjoint_Set_Union() {
		Rank.resize(N, 1);
		par.resize(N);
		for (int i = 1; i < N; i++) {
			par[i] = {i, 0};
		}
	}

	pii Find(int u) {
		if (u != par[u].first) {
			int len = par[u].second;
			par[u] = Find(par[u].first);
			par[u].second += len;
		}
		return par[u];
	}

	void Union(int u, int v) {
		int x = Find(u).first, y = Find(v).first;
		if (Rank[x] < Rank[y]) swap(x, y);
		if (x != y) par[y] = {x, 1}, Rank[x] += Rank[y];
	}
};

// Disjoint Set Union(Bipartite check)

struct Disjoint_Set_Union {

	std::vector<pii> par;
	std::vector<int> Rank;
	std::vector<int> bipartite;

	Disjoint_Set_Union() {
		Rank.resize(N, 1);
		par.resize(N);
		bipartite.resize(N, 1);
		for (int i = 1; i < N; i++) {
			par[i] = {i, 0};
		}
	}

	pii Find(int u) {
		if (u != par[u].first) {
			int parity = par[u].second;
			par[u] = Find(par[u].first);
			par[u].second ^= parity;
		}
		return par[u];
	}

	void add_edge(int u, int v) {
		pii x = Find(u);
		pii y = Find(v);
		u = x.first, v = y.first;
		int a = x.second, b = y.second;
		if (u == v) {
			if (a == b) bipartite[u] = 0;
		}
		else {
			if (Rank[u] < Rank[v]) swap(u, v);
			par[v] = {u, a ^ b ^ 1};
			bipartite[u] &= bipartite[v];
		}
	}

	bool is_partite(int u) {
		return bipartite[Find(u).first];
	}
};